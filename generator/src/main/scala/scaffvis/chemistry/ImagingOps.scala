package scaffvis.chemistry

import chemaxon.formats.MolExporter
import chemaxon.struc.MolBond
import scaffvis.shared.model._


/**
  * Encapsulates the functionality for conversion of molecules into their graphical representation.
  */
object ImagingOps {

  /**
    * Converts a given molecule into its graphical representation.
    *
    * @param stripSvgTag return only the inner content of the svg tag
    */
  def smilesToSvg(molecule: ChemMolecule, width: Int, height: Int, stripSvgTag: Boolean = true): String = {
    val svgBytes = MolExporter.exportToBinFormat(molecule, s"svg:headless,nosource,w$width,h$height,H_hetero,transbg,-a")
    val svg = new String(svgBytes, "US-ASCII")
    if(stripSvgTag) {
      //we strip the string
      val comment = "<!--Generated by Marvin with Batik SVG Generator-->"
      val startContent = svg.indexOfSlice(comment) + comment.length
      val endContent = svg.indexOfSlice("</svg>")
      val svgContent = svg.substring(startContent, endContent)
      svgContent
    } else {
      svg
    }
  }

  /**
    * Converts a given scaffold into its graphical representation. in the form of inner svg tag content.
    *
    * @param stripSvgTag return only the inner content of the svg tag
    */
  def scaffoldToSvg(scaffold: Scaffold, width: Int, height: Int, stripSvgTag: Boolean = true): String = {
    def wrap(content: String) =
      if(stripSvgTag) content
      else s"""<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 $width $height">$content</svg>"""

    scaffold match {
      case SmilesScaffold(_, smiles, level, _, _) => smiles match {
        case "" =>
          wrap(svgText("empty", 200, 240, TextAnchor.middle))
        case "C" =>
          wrap("""<circle cx="200" cy="200" r="10" fill="black" />""") //a dot
        case _ =>
          val molecule = SmilesOps.smilesToMolecule(smiles)
          if (level == HierarchyLevels.ringConnectivityExtended)
            multiBondsToBold(molecule)
          wrap(smilesToSvg(molecule, width, height, stripSvgTag = true))
      }

      case RingCountScaffold(_, ringCount, _, _, _) =>
        wrap(
          """<circle cx="300" cy="200" r="60" fill="none" stroke-width="10px" stroke="black" />"""
            + svgText(ringCount.toString, 220, 240, TextAnchor.end)
        )


      case RootScaffold => wrap(svgText("root", 200, 240, TextAnchor.middle))

      case _ => wrap(svgText("unknown", 200, 240, TextAnchor.middle))
    }
  }

  private def multiBondsToBold(molecule: ChemMolecule): Unit = {
    for (b <- molecule.getBondArray if b.getType > 1) {
      b.setType(1)
      b.setFlags(MolBond.BOLD, MolBond.BOLD)
    }
  }

  sealed abstract class TextAnchor(val value: String)
  object TextAnchor {
    case object middle extends TextAnchor("middle")
    case object end extends TextAnchor("end")
  }

  private val fonts = "Segoe UI, Helvetica Neue, Helvetica, Arial, sans-serif"

  private def svgText(content: String, x: Double, y: Double, anchor: TextAnchor): String =
     s"""<text x="$x" y="$y" fill="black" font-size="100px" style="text-anchor: ${anchor.value}; font-family: $fonts" >$content</text>"""

}
